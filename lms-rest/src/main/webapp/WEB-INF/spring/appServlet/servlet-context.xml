<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- Configure to plugin JSON as request and response in method handler -->
	<beans:bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</beans:bean>

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/lms_rest3" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="123456" />
		<!-- <beans:property name="password" value="goodluck" /> -->
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>in.lms.model.Course</beans:value>
				<beans:value>in.lms.model.SubSection</beans:value>
				<beans:value>in.lms.model.CustomFields</beans:value>
				<beans:value>in.lms.model.AtomicCourseSchedule</beans:value>
				<beans:value>in.lms.model.CourseSchedule</beans:value>
				<beans:value>in.lms.model.CourseCategory</beans:value>
				<beans:value>in.lms.model.LoginEnvelope</beans:value>
				<beans:value>in.lms.model.PasswordWrapper</beans:value>
				<beans:value>in.lms.model.SessionWrapper</beans:value>
				<beans:value>in.lms.model.UserSequence</beans:value>
				<beans:value>in.lms.model.Trainer</beans:value>
				<beans:value>in.lms.model.Degree</beans:value>
				<beans:value>in.lms.model.WorkExperience</beans:value>
				<beans:value>in.lms.model.Address</beans:value>
				<beans:value>in.lms.model.AtommicWorkExp</beans:value>
				<beans:value>in.lms.model.TestModel</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				<beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	<!-- <beans:bean id="accountServiceBean" class="com.spring.hibernate.rest.AccountServiceImpl"> 
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" 
		/> </beans:bean> -->

	<beans:bean id="courseSkeletonServiceBean" class="in.lms.service.CourseSkeletonServiceImpl">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

	<beans:bean id="coursesServiceBean" class="in.lms.service.CoursesServiceImpl">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

	<beans:bean id="miscServiceBean" class="in.lms.service.MiscellaneousServiceImpl">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="trainerServiceBean" class="in.lms.service.TrainerServiceImpl">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

	<context:component-scan base-package="in.lms" />

	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">


		<beans:property name="maxUploadSize" value="10000000" />

	</beans:bean>
	
	<!-- <mvc:interceptors>
		<beans:bean class="in.lms.interceptor.SessionTrackerInterceptor" />
	</mvc:interceptors> -->

</beans:beans>